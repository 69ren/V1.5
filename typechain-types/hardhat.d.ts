/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Booster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Booster__factory>;
    getContractFactory(
      name: "ElmoSOLID",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ElmoSOLID__factory>;
    getContractFactory(
      name: "FeeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeHandler__factory>;
    getContractFactory(
      name: "IBooster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBooster__factory>;
    getContractFactory(
      name: "IMultiRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiRewards__factory>;
    getContractFactory(
      name: "INeadStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INeadStake__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolRouter__factory>;
    getContractFactory(
      name: "ISwappoor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwappoor__factory>;
    getContractFactory(
      name: "IVeDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVeDepositor__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "IFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeDistributor__factory>;
    getContractFactory(
      name: "IGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGauge__factory>;
    getContractFactory(
      name: "IPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPair__factory>;
    getContractFactory(
      name: "IRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsDistributor__factory>;
    getContractFactory(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: "IVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoter__factory>;
    getContractFactory(
      name: "IVotingEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingEscrow__factory>;
    getContractFactory(
      name: "BaseERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseERC20__factory>;
    getContractFactory(
      name: "ERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626Upgradeable__factory>;
    getContractFactory(
      name: "MultiRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRewards__factory>;
    getContractFactory(
      name: "Rewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Rewarder__factory>;
    getContractFactory(
      name: "PoolRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolRouter__factory>;
    getContractFactory(
      name: "BribeSwappoor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BribeSwappoor__factory>;
    getContractFactory(
      name: "VeDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeDepositor__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC4626Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Booster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Booster>;
    getContractAt(
      name: "ElmoSOLID",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ElmoSOLID>;
    getContractAt(
      name: "FeeHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeHandler>;
    getContractAt(
      name: "IBooster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBooster>;
    getContractAt(
      name: "IMultiRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiRewards>;
    getContractAt(
      name: "INeadStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INeadStake>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolRouter>;
    getContractAt(
      name: "ISwappoor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwappoor>;
    getContractAt(
      name: "IVeDepositor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVeDepositor>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "IFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeDistributor>;
    getContractAt(
      name: "IGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGauge>;
    getContractAt(
      name: "IPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPair>;
    getContractAt(
      name: "IRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsDistributor>;
    getContractAt(
      name: "IRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: "IVoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoter>;
    getContractAt(
      name: "IVotingEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingEscrow>;
    getContractAt(
      name: "BaseERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseERC20>;
    getContractAt(
      name: "ERC4626Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626Upgradeable>;
    getContractAt(
      name: "MultiRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiRewards>;
    getContractAt(
      name: "Rewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Rewarder>;
    getContractAt(
      name: "PoolRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolRouter>;
    getContractAt(
      name: "BribeSwappoor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BribeSwappoor>;
    getContractAt(
      name: "VeDepositor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeDepositor>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
