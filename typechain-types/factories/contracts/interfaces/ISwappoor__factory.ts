/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISwappoor,
  ISwappoorInterface,
} from "../../../contracts/interfaces/ISwappoor";

const _abi = [
  {
    inputs: [],
    name: "priceOutOfSync",
    outputs: [
      {
        internalType: "bool",
        name: "state",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isWeth",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "zapIn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISwappoor__factory {
  static readonly abi = _abi;
  static createInterface(): ISwappoorInterface {
    return new utils.Interface(_abi) as ISwappoorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISwappoor {
    return new Contract(address, _abi, signerOrProvider) as ISwappoor;
  }
}
